// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  name            String?
  avatar          String?
  cover           String?
  bio             String?
  username        String    @unique
  followedBy      User[]    @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs   String[]  @db.ObjectId
  following       User[]    @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs    String[]  @db.ObjectId
  tweets          Tweet[]   @relation("autheredBy")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Comments        Comment[] @relation("authoredBy")
  likeIds         String[]  @db.ObjectId
  likes           Tweet[]   @relation("tweetsLikedBy", fields: [likeIds], references: [id])
  commentLikesIds String[]  @db.ObjectId
  commentlikes    Comment[] @relation("commentsLikedBy", fields: [commentLikesIds], references: [id])
  verified        Boolean   @default(false)
}

model Tweet {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  image      String?
  author     User      @relation("autheredBy", fields: [authorId], references: [id])
  authorId   String    @db.ObjectId
  hashtagIds String[]  @db.ObjectId
  hashtags   Hashtag[] @relation(fields: [hashtagIds], references: [id])
  comments   Comment[]
  likeIds    String[]  @db.ObjectId
  likes      User[]    @relation("tweetsLikedBy", fields: [likeIds], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  image     String?
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  tweetId   String   @db.ObjectId
  author    User     @relation("authoredBy", fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  likeIds   String[] @db.ObjectId
  likes     User[]   @relation("commentsLikedBy", fields: [likeIds], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hashtag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tweetIds  String[] @db.ObjectId
  tweets    Tweet[]  @relation(fields: [tweetIds], references: [id])
}
